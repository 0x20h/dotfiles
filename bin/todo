#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, os
import pickle
import io


#############
# Datamodel #
#############

class TodoItem:
	"""
	Class representation of a TODO list item.
	"""
	index = 0
	text = ''
	done = False

	def __init__(self, index, text, done = False):
		"""
		Creates a new TodoItem.
		"""
		self.index = index
		self.text = text
		self.done = done


class TodoList:
	"""
	Class representation of a TODO list.
	"""
	todos = []

	def __init__(self, todos = []):
		"""
		Create a new instance of TodoList with a given list of items.
		"""
		self.todos = todos

	def add(self, text):
		"""
		Add a new TodoItem to this list and return it.
		"""
		next_index = 1
		for item in self.todos:
			if item.index >= next_index:
				next_index = item.index + 1
		new_item = TodoItem(next_index, text)
		self.todos.append(new_item)
		return new_item

	def get(self, index):
		"""
		Returns the item with the given index.
		"""
		for item in self.todos:
			if str(item.index) == str(index):
				return item
		return None
	
	def check(self, index):
		"""
		Checks the item with the given index.
		"""
		return self._set_checked(index, True)
	
	def uncheck(self, index):
		"""
		Unchecks the item with the given index.
		"""
		return self._set_checked(index, False)
	
	def _set_checked(self, index, checked):
		"""
		Set an item to the given checked status.
		"""
		item = self.get(index)
		if item: item.done = checked
		return item
		
	def remove(self, index):
		"""
		Removes the item with the given index from the list.
		"""
		item = self.get(index)
		if item: self.todos.remove(item)
		return item
		
	def list(self):
		"""
		Returns all items, that are not yet done.
		"""
		result = []
		for item in self.todos:
			if not item.done:
				result.append(item)
		return result
		
	def listall(self):
		"""
		Returns all items.
		"""
		return self.todos


#############
# CLI-Code  #
#############

def usage():
	"""
	Print usage information.
	"""
	print "todo - CLI task management. Usage:"
	print "\ttodo create <name-of-item> - Create item"
	print "\ttodo ls                    - List open items"
	print "\ttodo lsall                 - List all items"
	print "\ttodo check <number>        - Mark item as done"
	print "\ttodo uncheck <number>      - Mark item as todo"
	print "\ttodo rm <number>           - Remove item"
	sys.exit(0)

def run(command, args, todolist):
	"""
	Run the given command on the given todolist.
	"""
	if command == 'create':
		create(args, todolist)
	elif command == 'ls':
		ls(args, todolist)
	elif command == 'lsall':
		lsall(args, todolist)
	elif command == 'check':
		check(args, todolist)
	elif command == 'uncheck':
		uncheck(args, todolist)
	elif command == 'rm':
		rm(args, todolist)
	else:
		usage()	

def out(item):
	"""
	Pretty print a todo item.
	"""
	if item.done:
		print " #{:<4} \033[1;32m √  \033[0m{}".format(item.index, item.text)
	else:
		print " #{:<4} \033[1;31m ✖  \033[0m{}".format(item.index, item.text)

def create(args, todolist):
	"""
	Handler for the create command.
	"""
	len(args) == 0 and usage()
	item_text = ' '.join(args)
	new_item = todolist.add(item_text)
	print 'Item created:'
	out(new_item)

def ls(args, todolist):
	"""
	Handler for the ls command.
	"""
	for item in todolist.list():
		out(item)

def lsall(args, todolist):
	"""
	Handler for the lsall command.
	"""
	for item in todolist.listall():
		out(item)

def check(args, todolist):
	"""
	Handler for the check command.
	"""
	if len(args) == 0:
		print "Argument required."
		usage()

	index = args[0]
	item = todolist.check(index)

	if item:
		print 'Item checked:'
		out(item)
	else:
		print "No such item #" + index + " found."

def uncheck(args, todolist):
	"""
	Handler for the uncheck command.
	"""
	if len(args) == 0:
		print "Argument required."
		usage()

	index = args[0]
	item = todolist.uncheck(index)

	if item:
		print 'Item unchecked'
		out(item)
	else:
		print "No such item #" + index + " found."

def rm(args, todolist):
	"""
	Handler for the rm command.
	"""
	if len(args) == 0:
		print "Argument required."
		usage()

	index = args[0]
	removed_item = todolist.remove(index)

	if removed_item:
		print 'Removed item:'
		out(removed_item)
	else:
		print "No such item #" + index + " found."
		

#############
# Main      #
#############

def main():
	todofile = os.path.join(os.getenv('HOME'), '.todolist')

	if os.path.exists(todofile):
		todoio = io.FileIO(todofile, 'r')
		todolist = TodoList(pickle.load(todoio))
		todoio.close()
	else:
		todolist = TodoList()

	if len(sys.argv) == 1:
		usage()
	else:
		run(sys.argv[1], sys.argv[2:], todolist)

	todoio = io.FileIO(todofile, 'w')
	pickle.dump(todolist.listall(), todoio)
	todoio.close()


if __name__ == '__main__':
	main()

